# Azure Deployment Plan for ea-website Project

## **Goal**
Deploy a high-performance, cinematic Next.js website to Azure Web App Service using Azure Developer CLI (AZD) with Bicep infrastructure as code. The site will leverage modern animation libraries (Framer Motion, GSAP, Locomotive Scroll) and video backgrounds for a premium user experience.

## **Project Information**

**AppName**: ea-website

- **Technology Stack**: Next.js 15 with TypeScript, React 19, and App Router
- **Styling**: Tailwind CSS for responsive, utility-first design
- **Animation Libraries**: 
  - Framer Motion for elegant micro-interactions
  - GSAP for cinematic hero sequences and complex animations
  - Lenis (modern Locomotive Scroll) for smooth scroll experiences
- **Application Type**: Static-first with SSR capabilities, optimized for video and animation
- **Build Output**: Static export or hybrid rendering based on content needs
- **Performance Focus**: 
  - Video optimization (< 10MB loops)
  - CDN delivery for global low-latency access
  - Application Insights for real-time monitoring
  - Edge caching and compression
- **Dependencies**: None (standalone web application)
- **Hosting Recommendation**: Azure Web App Service (Linux Node.js) for optimal Next.js hosting with CDN integration

## **Azure Resources Architecture**

> **Install the mermaid extension in IDE to view the architecture.**

```mermaid
graph TB
    User[User Browser] --> CDN[Azure Front Door / CDN]
    CDN --> WebApp[Azure Web App Service<br/>Next.js Application]
    WebApp --> Storage[Azure Storage<br/>Video Assets]
    WebApp --> AppInsights[Application Insights<br/>Monitoring]
    AppInsights --> LogAnalytics[Log Analytics Workspace]
    WebApp --> ManagedIdentity[User Managed Identity]
    
    style WebApp fill:#0078d4,color:#fff
    style CDN fill:#50e6ff,color:#000
    style AppInsights fill:#68217a,color:#fff
    style Storage fill:#ff8c00,color:#fff
```

**Data Flow**:
1. User requests are routed through Azure Front Door/CDN for global edge delivery
2. Static assets (videos, images) are served from Azure Storage via CDN
3. The Web App renders Next.js pages with server-side and static generation
4. Application Insights collects telemetry, performance metrics, and user analytics
5. Logs are aggregated in Log Analytics Workspace for troubleshooting and insights
6. Managed Identity enables secure access to Azure resources without credentials

## **Recommended Azure Resources**

### Application Hosting
- **Application**: ea-website
  - **Hosting Service Type**: Azure Web App Service (Linux)
  - **SKU**: Premium V3 P1v3 (2 vCPU, 8 GB RAM, auto-scaling)
    - **Performance**: High-performance compute with SSD storage
    - **Features**: Auto-scaling, deployment slots, advanced networking
    - **Justification**: Optimal for Next.js SSR/SSG with video workloads
  - **Configuration**:
    - **Runtime**: Node.js 20 LTS
    - **Platform**: Linux
    - **Build Command**: `npm run build`
    - **Start Command**: `npm start` or `next start`
    - **Environment Variables**:
      - `NODE_ENV=production`
      - `NEXT_TELEMETRY_DISABLED=1`
      - `APPLICATIONINSIGHTS_CONNECTION_STRING` (injected from App Insights)
      - `AZURE_STORAGE_ACCOUNT_NAME` (for video assets)
  - **Dependencies**: None (standalone app)

### Supporting Services

- **Azure Front Door / CDN Profile**
  - **SKU**: Standard (Microsoft-managed)
  - **Purpose**: Global content delivery, SSL/TLS termination, WAF protection
  - **Features**: Compression, caching rules, custom domains, HTTPS

- **Azure Storage Account**
  - **SKU**: Standard LRS (Locally Redundant Storage)
  - **Purpose**: Host optimized video files, static assets
  - **Container**: `videos` (Blob container with CDN integration)
  - **Features**: CDN origin, CORS enabled for web access

- **Application Insights**
  - **Type**: Application Performance Monitoring
  - **Purpose**: Real-time monitoring, custom telemetry, user analytics
  - **Features**: Live metrics, performance profiling, dependency tracking

- **Log Analytics Workspace**
  - **Purpose**: Centralized logging and analytics
  - **Connected Services**: All App Services, Application Insights
  - **Retention**: 30 days (configurable)

### Security Configurations

- **User Managed Identity**
  - **Assigned to**: Azure Web App Service
  - **Purpose**: Secure access to Azure Storage and Key Vault
  - **Role Assignments**:
    - **Storage Blob Data Reader** on video storage account
    - **Monitoring Metrics Publisher** for Application Insights

- **SSL/TLS**
  - **Minimum TLS Version**: 1.2
  - **HTTPS Only**: Enforced
  - **Custom Domain**: Supported via Azure Front Door

- **Network Security**
  - **WAF**: Enabled on Azure Front Door (OWASP rulesets)
  - **Access Restrictions**: Configure if needed for admin endpoints

## **Execution Steps**

> **Below are the steps for Copilot to follow; ask Copilot to update or execute this plan.**

### 1. Provision Azure Infrastructure And Deploy the Application

   1. **Get IaC Rules**: Retrieve Bicep template guidelines using `deploy_iac_rules_get` tool âœ“ (Already completed)
   
   2. **Generate Bicep Files**: Create infrastructure as code based on the plan:
      - `infra/main.bicep` - Main infrastructure template
      - `infra/main.parameters.json` - Environment parameters
      - `infra/modules/web-app.bicep` - Web App Service module
      - `infra/modules/monitoring.bicep` - Application Insights + Log Analytics
      - `infra/modules/storage.bicep` - Storage account for video assets
      - `infra/modules/cdn.bicep` - Azure Front Door configuration
   
   3. **Pre-check Bicep Syntax**: Use `get_errors` tool to validate all Bicep files for grammar errors. Fix any issues before deployment.
   
   4. **Initialize AZD**: Run `azd init` to configure azure.yaml with service definitions
   
   5. **Preview Deployment**: Run `azd provision --preview` to validate what resources will be created
   
   6. **Provision and Deploy**: Run `azd up` to:
      - Provision all Azure resources
      - Build the Next.js application
      - Deploy to Azure Web App Service
   
   7. **Verify Resource Creation**: Check deployment output to confirm all resources are provisioned successfully
   
   8. **Check Application Logs**: Use `deploy_app_logs_get` tool to verify the application is running correctly

### 2. Summary

   1. **Generate Deployment Summary**: Create `.azure/summary.copilotmd` with:
      - List of all created/modified deployment files with descriptions
      - Mermaid diagram showing provisioned Azure resources
      - Deployment URLs (Web App, Front Door endpoint)
      - Monitoring dashboard links
      - Next steps for custom domain and DNS configuration

---

## **Performance Optimization Checklist**

- [ ] Enable HTTP/2 and compression on Azure Front Door
- [ ] Configure CDN caching rules for static assets (videos, images, fonts)
- [ ] Set up video files in Azure Storage with appropriate access policies
- [ ] Enable Application Insights performance profiling
- [ ] Configure auto-scaling rules based on CPU/memory metrics
- [ ] Set up deployment slots for zero-downtime updates
- [ ] Implement custom error pages (404, 500)
- [ ] Configure CORS policies for cross-origin requests
- [ ] Enable diagnostic logging for troubleshooting

## **Security Best Practices Applied**

- [x] Managed Identity for passwordless authentication
- [x] HTTPS-only enforcement
- [x] Web Application Firewall (WAF) enabled
- [x] Minimum TLS 1.2
- [x] No hardcoded credentials
- [x] Storage access via RBAC (not access keys)
- [x] Application Insights for security monitoring
- [x] Log Analytics for audit trails
